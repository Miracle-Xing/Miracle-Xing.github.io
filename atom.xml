<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>邢大强的blog</title>
  
  <subtitle>Stay hungry. Stay foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://miracle-xing.github.io/"/>
  <updated>2019-07-21T16:53:23.249Z</updated>
  <id>https://miracle-xing.github.io/</id>
  
  <author>
    <name>Miracle</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spark 概念及应用程序架构</title>
    <link href="https://miracle-xing.github.io/2019/07/22/Spark-%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84/"/>
    <id>https://miracle-xing.github.io/2019/07/22/Spark-概念及应用程序架构/</id>
    <published>2019-07-21T16:47:55.000Z</published>
    <updated>2019-07-21T16:53:23.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li><p>Spark是计算框架，不是存储框架。类似Hadoop中的MR</p></li><li><p>Spark是分布式的内存计算框架，Spark在计算的时候，内存不够用，数据会写到磁盘。</p><br><br><a id="more"></a></li><li><p>Spark和Hadoop没有必然联系，两者是独立的。</p></li><li><p>Spark可以读取HDFS / fileSystem / DB / Kafka / Flume上的数据，可以把数据写到HDFS / fileSystem / DB / Kafka / Flume中。</p></li><li><p>Spark可以使用YARN做资源调度管理器 Spark on YARN。</p></li><li><p><strong>数据不动代码动</strong>。</p></li><li><p>Spark架构：Master Slave架构，主从架构，一主多从。</p></li><li><p>主从架构的突出问题是 <strong>单点故障</strong>，HA（高可用）架构就是为了解决单点故障，心跳消息。</p></li><li><p>主主架构：Flume，Kafka</p></li><li><p>数据本地性：计算时从最近的节点读取数据。</p></li><li><p>粗粒度、细粒度<br>指的是资源分配方式。<br>粗粒度：应用启动，资源就分配给你，你用不用都是你的。<br>细粒度：不提前分配资源，你需要的时候再给你。</p></li><li><p>Spark两种算子 <strong>Transformation</strong> 和 <strong>Action</strong><br>Transformation算子返回值是 RDD，Action算子返回值是计算结果，不是RDD。</p></li><li><p>Spark 有四种部署方式：Standalone / Spark on YARN / Apache Mesos / Kubernetes</p></li><li><p>Spark Shell 是Spark提供的本地交互式脚本，默认启动时Local模式，使用Scala语言。</p></li></ol><p><strong>Scala 一行代码实现 wordcount</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textFile.flatMap(line=&gt;line.split(&quot; &quot;)).map(word=&gt;(word,1)).reduceByKey(_+_).sortBy(_._2,false).collect().foreach(println)</span><br></pre></td></tr></table></figure><h2 id="Spark-应用程序架构"><a href="#Spark-应用程序架构" class="headerlink" title="Spark 应用程序架构"></a>Spark 应用程序架构</h2><ol><li><p>Spark 应用程序组件：driver, the master, the cluster manager 和运行在worker节点的executor(s)<br><img src="/images/2019/07/22/42616bf0-abd7-11e9-87f2-3dee39091945.png" alt="Spark 应用程序架构.png"><br>所有Spark组件，包括 driver, master 和 executor进程，都在JVM中运行。使用Scala编写的Spark程序编译为Java字节码在JVM上运行。</p></li><li><p>区分Spark运行时应用程序组件 和运行它们的位置和节点类型是很重要的。使用不同的部署模式，这些组件可能运行在不同的位置，所以不要以物理节点或实例的形式考虑这些组件。</p></li></ol><h3 id="1-Spark-Driver"><a href="#1-Spark-Driver" class="headerlink" title="1.  Spark Driver"></a>1.  Spark Driver</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Spark 应用程序由一个 driver 进程（驱动程序）和一组 executor 进程组成。Spark 应用程序的生命周期从 Spark Driver 程序开始（和结束）。driver 进程负责运行你的 main 函数，此进程位于集群中的一个 节点上。主要负责三件事：</p><ol><li>维护有关 Spark 应用程序的信息；</li><li>响应用户的程序或输入；</li><li>分配和调度 executor 的 task 和资源。</li></ol><p>executors 进程实际执行 driver 分配给他们的工作。这意味着每个 executor 主要负责两件事：</p><ol><li>执行由驱动程序分配给它的代码。</li><li>将执行器 executor 的计算状态报告给 driver 节点。</li></ol><h4 id="1-1-SparkContext"><a href="#1-1-SparkContext" class="headerlink" title="1.1 SparkContext"></a>1.1 SparkContext</h4><p>Spark Driver 程序负责创建 SparkContext。 SparkContext 在 Spark Shell 中对应的变量名为 sc，用于连接 Spark 集群，是与 Spark 集群交互的入口。SparkContext 在 Spark 应用程序（包括 Spark Shell）的开始实例化，并用于整个程序。</p><h4 id="1-2-应用程序执行计划"><a href="#1-2-应用程序执行计划" class="headerlink" title="1.2 应用程序执行计划"></a>1.2 应用程序执行计划</h4><p>Driver 程序的主要功能之一是规划应用程序的执行。驱动程序接受所有请求的 transformation 和 action 操作，并创建一个有向无环图（DAG）。<br><strong>注</strong>：DAG  是计算机科学中常用的表示数据流及其依赖关系的数学结构。DAGs 包含节点和边，节点表示执行计划中的步骤。DAG中的边以定向的方式将一个节点连接到另一个顶点，这样就不会出现 循环引用。</p><p>DAG 由 task 和 stages 组成。task 是 Spark 程序中可调度工作的最小单位。stage是一组可以一起运行的task。多个stage之间是相互依存的 。shuffle是划分stage的依据。</p><p>在进程调度意义上，DAGs 并不是 Spark 独有的。例如，它们被用于其他大数据生态系统项目，如 Tez、Drill 和 Presto 的任务调度。DAGs 是 Spark 的基础！！！</p><h4 id="1-3-应用程序的调度"><a href="#1-3-应用程序的调度" class="headerlink" title="1.3 应用程序的调度"></a>1.3 应用程序的调度</h4><p>driver 程序还协调 DAG 中定义的 stage 和 task 的运行。在调度和运行 task 时涉及的主要driver 程序活动包括：</p><ul><li>跟踪可用资源以执行 task</li><li>调度任务，以便在可能的情况下 “接近”数据运行——数据本地性</li><li>协调数据在 stages 之间的移动</li></ul><h4 id="1-4-其他功能"><a href="#1-4-其他功能" class="headerlink" title="1.4 其他功能"></a>1.4 其他功能</h4><p>除了计划和编排 Spark 程序的执行之外，驱动程序还负责从应用程序返回结果。<br>driver 程序在4040端口上自动创建了应用程序 UI。如果在同一个主机上启动后续应用程序，则会为应用程序 UI 使用连续的端口（例如 4041, 4042 等）。</p><h3 id="2-Executor-和-worker"><a href="#2-Executor-和-worker" class="headerlink" title="2. Executor 和 worker"></a>2. Executor 和 worker</h3><p>Spark executor 是运行来自 Spark DAG 的task 进程。executor 在 Spark 集群中的worker 节点上获取 CPU和内存等计算资源。executor 专用于特定的 Spark 应用程序，并在 应用程序完成时终止。在 Spark 程序中，Spark executor 可以运行成百上千个 task。</p><p>通常情况下，worker 节点（承载 executor 进程）具有有限或固定数量的 executor。因此，一个 spark 集群（包括一定数量的服务器节点）具有有限数量的 executor，可以分配它们来运行 Spark 任务。</p><p>Spark executor 驻留在 JVM 中。executor 的 JVM 分配了一个堆内存，这是一个用于存储和管理对象的专用内存空间。堆内存的大小由 spark 配置文件 spark-default.xml 中的 spark.executor.memory 属性确定，或者 由提交应用程序时 spark-submit 的参数 –executor-memroy  确定。</p><p>worker 和 executor 只知道分配给他们的 task，而 driver 程序负责理解组成应用程序的完整 task 集合它们各自的依赖关系。</p><h3 id="3-Master-和-Cluster-Manager"><a href="#3-Master-和-Cluster-Manager" class="headerlink" title="3. Master 和 Cluster Manager"></a>3. Master 和 Cluster Manager</h3><p>Spark driver 程序计划并协调运行 Spark 应用程序所需的 task 集。task 本身在 executor 中运行，executor 驻留在 worker 节点上。</p><p>Master 和 Cluster Manager 是监控、分配、回收集群（Executor 运行的节点）资源的核心进程，Master 和 Cluster Manager 可以是各自独立的进程（Spark On YARN），也可以组合成一个进程（Standalone 运行模式）。</p><h4 id="3-1-Master"><a href="#3-1-Master" class="headerlink" title="3.1 Master"></a>3.1 Master</h4><p>Spark master 是用于请求集群中的资源并将这些资源提供给 Spark driver 程序的进程。在两种部署模式中，master 节点都与 worker 节点或slave 节点协商资源或容器，并跟踪 它们的状态并监视它们的进展。</p><p>Spark master 进程在 master 进程所在主机上的端口 8080 上，提供 web 用户界面。</p><p><strong>注</strong>：要区分 driver 进程和 master 进程在 Spark 程序运行时的作用。master 只是请求 资源，并使这些资源在应用程序的生命周期内对驱动程序可用。尽管 master 监控这些资源的状态和健康状况，但是它不参与应用程序的执行以及 task 和 stage 的协调。</p><h4 id="3-2-Cluster-Manager（集群管理器）"><a href="#3-2-Cluster-Manager（集群管理器）" class="headerlink" title="3.2 Cluster Manager（集群管理器）"></a>3.2 Cluster Manager（集群管理器）</h4><p>Cluster Manager 进程负责监控分配给 worker 节点上的资源，这些资源是 master 进程请求分配的。然后，master 以 Executor 的形式将这些集群资源提供给 driver 程序。如前所述，Cluster Manager可以独立于 master 进程（Spark On YARN），也可以组合成一个进程（Standalone 运行模式）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Spark是计算框架，不是存储框架。类似Hadoop中的MR&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spark是分布式的内存计算框架，Spark在计算的时候，内存不够用，数据会写到磁盘。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://miracle-xing.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习</title>
    <link href="https://miracle-xing.github.io/2019/07/21/Python-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://miracle-xing.github.io/2019/07/21/Python-学习/</id>
    <published>2019-07-21T05:29:43.000Z</published>
    <updated>2019-07-21T15:00:39.861Z</updated>
    
    <content type="html"><![CDATA[<ol><li>打印输出：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;Hello World!&quot;)</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li>标识符：<br>第一个字符必须是字母表中字母或下划线_。<br>标识符的其他部分由字母、数字或下划线组成。<br>标识符对大小写敏感。<br><br><a id="more"></a></li></ol><hr><ol start="3"><li>导包，查看Python关键字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import keywordprint(keyword.kwlist)</span><br><span class="line"></span><br><span class="line">print(keyword.kwlist)</span><br></pre></td></tr></table></figure></li></ol><p><strong>输出</strong>：[‘False’, ‘None’, ‘True’, ‘and’, ‘as’, ‘assert’, ‘async’, ‘await’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</p><hr><p>4.注释</p><ul><li><p>单行注释(#)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 第一个注释</span><br><span class="line">print(&quot;Hello, Python!&quot;)  # 第二个注释</span><br></pre></td></tr></table></figure></li><li><p>多行注释(# ‘’’ “””)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 第一个注释</span><br><span class="line"># 第二个注释</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">第三注释</span><br><span class="line">第四注释</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">第五注释</span><br><span class="line">第六注释</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li><li><p>文档注释(“””)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">Python最具特色的就是使用缩进来表示代码块，不需要使用大括号&#123;&#125;。</span><br><span class="line">缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li></ul><hr><ol start="5"><li>行与缩进<br>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if True: </span><br><span class="line">    print (&quot;True&quot;) </span><br><span class="line">else: </span><br><span class="line">    print (&quot;False&quot;)</span><br></pre></td></tr></table></figure><p>以下代码最后一行语句缩进数的空格数不一致，会导致运行错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if False:    </span><br><span class="line">    print(&quot;Answer&quot;)    </span><br><span class="line">    print(&quot;True&quot;)</span><br><span class="line">else:    </span><br><span class="line">    print(&quot;Answer&quot;) </span><br><span class="line">  print(&quot;False&quot;)</span><br></pre></td></tr></table></figure><p> <strong>输出</strong>：<br>   File “E:/Java/IntelliJ IDEA/python-demo/bin/demo/py_line_indentation.py”, line 11<br>    print(“False”)<br>                 ^<br>IndentationError: unindent does not match any outer indentation level</p><hr><ol start="6"><li>多行语句</li></ol><ul><li>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">total = &quot;one&quot; + \</span><br><span class="line">        &quot;\r\n&quot; + &quot;two&quot; + \</span><br><span class="line">        &quot;\r\n&quot; + &quot;three&quot;</span><br><span class="line">print(total)</span><br></pre></td></tr></table></figure><ul><li>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">str1 = &quot;Andy&quot;</span><br><span class="line">total1 = [&quot;one&quot;,</span><br><span class="line">          &quot;two&quot;,</span><br><span class="line">          &quot;three&quot;]</span><br><span class="line"></span><br><span class="line">total2 = (&quot;one&quot;</span><br><span class="line">          &quot;\r\n&quot;  &quot;two&quot;</span><br><span class="line">          &quot;\r\n&quot;  &quot;three&quot;)</span><br><span class="line"></span><br><span class="line">total3 = &#123;&quot;one&quot;</span><br><span class="line">          &quot;\r\n&quot; + str1 +</span><br><span class="line">          &quot;\r\n&quot;  &quot;three&quot;&#125;</span><br><span class="line"></span><br><span class="line">print(total1)</span><br><span class="line">print(total2)</span><br><span class="line">print(total3)</span><br></pre></td></tr></table></figure></li></ul><p><strong>输出</strong>：<br>[‘one’, ‘two’, ‘three’]<br>one<br>two<br>three<br>{‘one\r\nAndy\r\nthree’}</p><hr><ol start="7"><li>数字（Number）类型<br>Python中数字有四种类型：整数、布尔型、浮点数和复数。<ul><li>int（整数），如1，只有一种整数类型int，表示为长整型，没有python2中的Long。</li><li>bool（布尔），如True。</li><li>float（浮点数），如1.23、3E-2</li><li>complex（复数），如1 + 2j、1.1 + 2.2j</li></ul></li></ol><hr><ol start="8"><li>字符串（String）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"># python中单引号和双引号使用完全相同</span><br><span class="line">str1 = &apos;单引号的句子&apos;</span><br><span class="line">str2 = &quot;双引号的句子&quot;</span><br><span class="line">print(str1)</span><br><span class="line">print(str2)</span><br><span class="line">print(&quot;---------------------------&quot;)</span><br><span class="line"></span><br><span class="line"># 使用三引号（&apos;&apos;&apos;或&quot;&quot;&quot;）可以指定一个多行字符串</span><br><span class="line">str3 = &apos;&apos;&apos;这是一个</span><br><span class="line">多行字符串&apos;&apos;&apos;</span><br><span class="line">str4 = &quot;&quot;&quot;这是另一个</span><br><span class="line">多行字符串&quot;&quot;&quot;</span><br><span class="line">print(str3)</span><br><span class="line">print(str4)</span><br><span class="line">print(&quot;---------------------------&quot;)</span><br><span class="line"></span><br><span class="line"># 转义符 &apos;\&apos;</span><br><span class="line">str5 = &quot;转义符的\n使用&quot;</span><br><span class="line">print(str5)</span><br><span class="line">print(&quot;---------------------------&quot;)</span><br><span class="line"></span><br><span class="line"># 反斜杠可以用来转义，使用r可以让反斜杠不发生转义。</span><br><span class="line">str6 = r&quot;转义符的\n使用&quot;</span><br><span class="line">print(str6)</span><br><span class="line">print(&quot;---------------------------&quot;)</span><br><span class="line"></span><br><span class="line"># 按字面意义级联字符串，如&quot;this &quot;&quot;is &quot;&quot;string&quot;会被自动转换为this is string</span><br><span class="line">str7 = &quot;this &quot;&quot;is &quot;&quot;string&quot;</span><br><span class="line">print(str7)</span><br><span class="line">print(&quot;---------------------------&quot;)</span><br><span class="line"></span><br><span class="line"># 字符串可以用 + 运算符连接在一起，用*运算符重复</span><br><span class="line">print(str7 + &quot;（使用+拼接）&quot;)</span><br><span class="line">print((str7 + &quot;; &quot;) * 3)</span><br><span class="line">print(&quot;---------------------------&quot;)</span><br><span class="line"></span><br><span class="line"># Python中字符串有两种索引方式，从左往右以0开始，从右往左以-1开始</span><br><span class="line">str8 = &quot;123456789&quot;</span><br><span class="line">print(str8[0])</span><br><span class="line">print(str8[-1])</span><br><span class="line">print(&quot;---------------------------&quot;)</span><br><span class="line"></span><br><span class="line"># Python中字符串不能改变</span><br><span class="line"># str8[0] = &quot;gzvje&quot;</span><br><span class="line"># print(str8)</span><br><span class="line"></span><br><span class="line"># Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</span><br><span class="line"></span><br><span class="line"># 字符串的截取的语法格式如下：变量[头下标:尾下标:步长]</span><br><span class="line">print(str8[1:5:3])</span><br><span class="line"></span><br><span class="line">for i in range(1, 5, 3):</span><br><span class="line">    print(str8[i])</span><br><span class="line">print(&quot;---------------------------&quot;)</span><br><span class="line"></span><br><span class="line">str9 = &quot;Runoob&quot;</span><br><span class="line">print(str9)  # 输出字符串</span><br><span class="line">print(str9[0:-1])   # 输出第一个到倒数第二个的所有字符</span><br><span class="line">print(str9[0])  # 输出字符串第一个字符</span><br><span class="line">print(str9[2:5])    # 输出从第三个开始到第五个字符</span><br><span class="line">print(str9[2:])     # 输出从第三个开始到最后的所有字符</span><br><span class="line">print(str9*2)   # 输出字符串两次</span><br><span class="line">print(str9 + &apos;你好&apos;)  # 连接字符串</span><br><span class="line">print(&quot;---------------------------&quot;)</span><br><span class="line"></span><br><span class="line">print(&apos;hello\nrunoob&apos;)  # 使用反斜杠(\)+n转义特殊字符</span><br><span class="line">print(r&apos;hello\nrunoob&apos;)  # 在字符串前面添加一个r，表示原始字符串，不会发生转义</span><br><span class="line"># 这里的r指raw，即 raw string。</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="9"><li>空行<br>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。<br>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</li></ol><p><strong>记住</strong>：空行也是程序代码的一部分。</p><hr><ol start="10"><li>等待用户输入<br>执行下面的程序在按回车键后就会等待用户输入：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input(&quot;\n\n按下 enter 键后退出。&quot;)`</span><br></pre></td></tr></table></figure></li></ol><p>以上代码中 ，”\n\n”在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。</p><hr><ol start="11"><li>同一行显示多条语句<br>Python可以在同一行中使用多条语句，语句之间使用分号（;）分割，以下是一个简单的实例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import sys; x = &quot;runoob&quot;; sys.stdout.write(x + &quot;\n&quot;)</span><br></pre></td></tr></table></figure></li></ol><p><strong>输出</strong>：runoob</p><hr><ol start="12"><li>多个语句构成代码组<br>缩进相同的一组语句构成一个代码块，我们称之为代码组。<br>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号（:）结束，该行之后的一行或多行代码构成代码组。<br>我们 将首行及后面 的代码组称为一个子句（clause）。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">i = 5</span><br><span class="line">if i &lt; 5:</span><br><span class="line">    print(&quot;i 小于 5&quot;)</span><br><span class="line">    i = 6</span><br><span class="line">elif i == 5:</span><br><span class="line">    print(&quot;i 等于 5&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;i 大于 5&quot;)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">代码组：</span><br><span class="line">    print(&quot;i 小于 5&quot;)</span><br><span class="line">    i = 6</span><br><span class="line">    </span><br><span class="line">子句：</span><br><span class="line">if i &lt; 5:</span><br><span class="line">    print(&quot;i 小于 5&quot;)</span><br><span class="line">    i = 6</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="13"><li>Print输出<br>print默认输出是换行的，如果要实现不换行需要在变量末尾加上 end =””<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = &quot;a&quot;</span><br><span class="line">y = &quot;b&quot;</span><br><span class="line"></span><br><span class="line"># 换行输出</span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br><span class="line">print(&quot;--------------------------&quot;)</span><br><span class="line"></span><br><span class="line"># 不换行输出</span><br><span class="line"># end可以定义输出后拼接字符，默认是&apos;\n&apos;</span><br><span class="line">print(x, end=&quot;&quot;)</span><br><span class="line">print(y, end=&quot;&quot;)</span><br><span class="line">print()</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="14"><li>import 与 from…import<br>在 python 用 import 或者 from…import 来导入相应的模块。将整个模块(somemodule)导入，格式为： import somemodule从某个模块中导入某个函数,格式为： from somemodule import somefunction从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc将某个模块中的全部函数导入，格式为： from somemodule import *<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 导入sys模块</span><br><span class="line">import sys</span><br><span class="line">print(&quot;===================Python import mode================&quot;)</span><br><span class="line">print(&quot;命令行参数为：&quot;)</span><br><span class="line">for i in sys.argv:</span><br><span class="line">    print(i)</span><br><span class="line">print(&quot;\n python 路径为： &quot;, sys.path)</span><br><span class="line"></span><br><span class="line"># 导入sys模块的argv, path成员</span><br><span class="line">from sys import argv, path</span><br><span class="line"></span><br><span class="line">for i in argv:</span><br><span class="line">    print(i)</span><br><span class="line">print(path)     # 因为 已经导入path成员，所以此处引用时不需要加sys.path</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="15"><li>Number（数字）<br>Python3 支持int、float、bool、complex（复数）。<br>在Python3里，只有一种整数类型int，表示长整型，没有python2中的Long。<br>想大多数语言 一样，数值类型的赋值和计算都是很 直观的。<br>内置的type()函数可以用来查询变量所指的对象类型。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, d = 1, 1.23, True, 1 + 3j</span><br><span class="line">print(type(a))</span><br><span class="line">print(type(b))</span><br><span class="line">print(type(c))</span><br><span class="line">print(type(d))</span><br></pre></td></tr></table></figure></li></ol><p><strong>输出</strong>：<br>&lt;class ‘int’&gt;<br>&lt;class ‘float’&gt;<br>&lt;class ‘bool’&gt;<br>&lt;class ‘complex’&gt;</p><p>此外还可以用isinstance来判断<br><code>print(isinstance(a, int))</code><br><strong>输出</strong>：True</p><p>isinstance和type的区别在于：<br>type()不会认为子类是一种父类类型。<br>isinstance()会认为子类是一种父类类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class A:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class B(A):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(isinstance(A(), A))</span><br><span class="line">print(type(A()) == A)</span><br><span class="line">print(&quot;------------------&quot;)</span><br><span class="line"></span><br><span class="line">print(isinstance(B(), A))</span><br><span class="line">print(type(B()) == A)</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：<br>True<br>True<br>-—————–<br>True<br>False</p><p><strong>注意</strong>：在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 当你指定 一个值时，Number对象就会被创建</span><br><span class="line">var1 = 1</span><br><span class="line">var2 = 10</span><br><span class="line"></span><br><span class="line"># 您也可以使用del语句删除一些对象引用。</span><br><span class="line"># del语句的语法是</span><br><span class="line"># del var2</span><br><span class="line"></span><br><span class="line"># 也可以使用del语句删除单个或多个对象。</span><br><span class="line">del var1, var2</span><br><span class="line">print(&quot;------------------&quot;)</span><br><span class="line"></span><br><span class="line"># 数值运算</span><br><span class="line">print(5 + 4)    # 加法</span><br><span class="line">print(4.3 - 2)  # 减法</span><br><span class="line">print(3 * 7)    # 乘法</span><br><span class="line">print(2 / 4)    # 除法</span><br><span class="line">print(2 // 4)   # 除法，取商</span><br><span class="line">print(17 % 3)   # 取余</span><br><span class="line">print(2 ** 5)   # 乘方</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：<br>-—————–<br>9<br>2.3<br>21<br>0.5<br>0<br>2<br>32</p><ol><li>Python可以同时为多个变量赋值，如a, b = 1, 2。</li><li>一个变量可以通过赋值指向不同类型的对象。</li><li>数值的除法包含两个运算符：/ 返回一个浮点数，//返回一个整数（取商)</li><li>在混合计算时，Python会把整型转换成为浮点数。</li></ol><hr><ol start="16"><li>String（字符串）</li></ol><p>Python中的字符串用单引号’或双引号”括起来，同时使用反斜杠\转义特殊字符。</p><p>字符串的截取语法格式如下：<br>变量[头下标:尾下标]</p><p>索引值以0为开始值，-1为从末尾的开始位置。<br>加号 + 是字符串的连接符，星号 * 表示复制当前字符串，紧跟的数字为复制的次数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str1 = &quot;Runoob&quot;</span><br><span class="line"></span><br><span class="line">print(str1)     # 输出字符串</span><br><span class="line">print(str1[0:-1])   # 输出第一个到倒数第二个的所有字符</span><br><span class="line">print(str1[0])      # 输出字符串第一个字符</span><br><span class="line">print(str1[0:])     # 输出从第一2个开始最后的字符</span><br><span class="line">print(str1[2:5])    # 输出从第三个开始到第五个的字符</span><br><span class="line">print(str1[2:])     # 输出从第三个开始到最后所有字符</span><br><span class="line">print(str1 * 2)     # 输出字符串两次</span><br><span class="line">print(str1 + &apos;TEST&apos;)    # 连接字符串</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：<br>Runoob<br>Runoo<br>R<br>Runoob<br>noo<br>noob<br>RunoobRunoob<br>RunoobTEST</p><p>Python使用反斜杠\转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个r，表示原始字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;Ru\noob&quot;)</span><br><span class="line">print(r&quot;Ru\noob&quot;)</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：<br>Ru<br>oob<br>Ru\noob</p><p>另外，反斜杠\可以作为续行符，表示下一行是上一行的延续。也可以使用”””…”””或者’’’…’’’跨越多行。<br>注意，Python没有单独的字符类型，一个字符就是长度为1的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">word = &apos;Python&apos;</span><br><span class="line">print(word[0], word[5])</span><br><span class="line">print(word[-1], word[-6])</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：<br>P n<br>n P</p><p>与C字符串不同的是，Python字符串不能被改变。向一个索引位置赋值，比如word[0] = ‘m’会导致错误。</p><p><strong>注意</strong>：</p><ol><li>反斜杠可以用来转义，使用r可以让反斜杠不发生转义。</li><li>字符串可以用+运算符连接在一起，用*运算符重复。</li><li>Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。</li><li>Python中的字符串不能改变。</li></ol><hr><ol start="17"><li>List（列表）</li></ol><p>List（列表）是Python中使用最频繁的数据类型。<br>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。<br>列表是写在方括号[]之间、用逗号分隔开的元素列表。<br>和字符串一样，列表同样可以被索引和 截取，列表被截取后返回一个包含所需元素的新列表。</p><p>列表 截取的语法格式如下：<br>变量[头下标：尾下标]<br>索引值以0为开始值，-1为从末尾的开始位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]</span><br><span class="line"></span><br><span class="line">print(t[1:3])</span><br><span class="line">print(t[:4])</span><br><span class="line">print(t[3:])</span><br><span class="line">print(t[:])</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：<br>[‘b’, ‘c’]<br>[‘a’, ‘b’, ‘c’, ‘d’]<br>[‘d’, ‘e’]<br>[‘a’, ‘b’, ‘c’, ‘d’, ‘e’]</p><p>加号+是列表连接运算符，星号*是重复操作。如下实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list = [&apos;abcd&apos;, 786, 2.23, &apos;runoob&apos;, 70.2]</span><br><span class="line">tinylist = [123, &apos;runoob&apos;]</span><br><span class="line"></span><br><span class="line">print(list)  # 输出完整列表</span><br><span class="line">print(list[0])  # 输出列表第一个元素</span><br><span class="line">print(list[1:3])  # 从第二个开始输出到第三个元素</span><br><span class="line">print(list[2:])  # 输出从第三个元素开始的所有元素</span><br><span class="line">print(tinylist * 2)  # 输出两次列表</span><br><span class="line">print(list + tinylist)  # 连接列表</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：<br>[‘abcd’, 786, 2.23, ‘runoob’, 70.2]<br>abcd<br>[786, 2.23]<br>[2.23, ‘runoob’, 70.2]<br>[123, ‘runoob’, 123, ‘runoob’]<br>[‘abcd’, 786, 2.23, ‘runoob’, 70.2, 123, ‘runoob’]</p><p>与Python字符串不一样的是，列表中的元素是可以改变的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [1, 2, 3, 4, 5]</span><br><span class="line">a[0] = 9</span><br><span class="line">a[2:5] = [13, 14, 15]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：<br>[9, 2, 13, 14, 15]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a[2:5] = []</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：<br>[9, 2]</p><p>List内置了有很多方法，列如append(), pop()等等，这在后面会讲到。</p><p><strong>注意</strong>：</p><ol><li>List写在方括号之间，元素用逗号隔开。</li><li>和字符串一样，list可以被索引和切片。</li><li>List可以使用+操作符进行拼接。</li><li>List中的元素是可以改变的。</li></ol><p>Python列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引1到索引4的位置并# 设置为步长为（间隔一个位置）来截取字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">letter = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;]</span><br><span class="line">print(letter[1:4:2])</span><br></pre></td></tr></table></figure><p>[‘b’, ‘d’]</p><p>如果第三个参数为负数表示逆向读取，以下实例用于翻转字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def reverseWords(input1):</span><br><span class="line">    # 通过空格将字符串分隔符，把各个单词分隔为列表</span><br><span class="line">    inputWords = input1.split(&quot; &quot;)</span><br><span class="line"></span><br><span class="line">    inputWords = inputWords[-1::-1]</span><br><span class="line"></span><br><span class="line">    output = &quot; &quot;.join(inputWords)</span><br><span class="line"></span><br><span class="line">    return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    input1 = &quot;I like runoob&quot;</span><br><span class="line">    rw = reverseWords(input1)</span><br><span class="line">    print(rw)</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：<br>runoob like I</p><hr><ol start="18"><li>Tuple（元组）</li></ol><p>元组（tuple）与列表类似，不同之处在于元组不能修改。元组写在小括号（）里，<br>元素之间用逗号隔开。<br>元组中的元素类型也可以不相同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (&apos;abcd&apos;, 786, 2.23, &apos;runoob&apos;, 70.2)</span><br><span class="line">tinytuple = (123, &apos;runoob&apos;)</span><br><span class="line"></span><br><span class="line">print(tuple1)   # 输出完整元组</span><br><span class="line">print(tuple1[0])    # 输出元组的第一个元素</span><br><span class="line">print(tuple1[1:3])  # 输出从第二个元素开始到第三个元素</span><br><span class="line">print(tuple1[2:])   # 输出从第三个元素开始的所有元素</span><br><span class="line">print(tinytuple * 2)    # 输出两次元组</span><br><span class="line">print(tuple1 + tinytuple)   # 连接元组</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：<br>(‘abcd’, 786, 2.23, ‘runoob’, 70.2)<br>abcd<br>(786, 2.23)<br>(2.23, ‘runoob’, 70.2)<br>(123, ‘runoob’, 123, ‘runoob’)<br>(‘abcd’, 786, 2.23, ‘runoob’, 70.2, 123, ‘runoob’)</p><p>元组与字符串类似，可以被索引且下标索引 从0开始，-1为从末尾 开始的位置。也可以进行截取。<br>其实，可以把字符串看作一种特殊的元组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tup = (1, 2, 3, 4, 5, 6)</span><br><span class="line">print(tup[0])</span><br><span class="line">print(tup[1:5])</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：<br>1<br>(2, 3, 4, 5)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup[0] = 11</span><br><span class="line">print(tup)</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：<br>Traceback (most recent call last):<br>  File “E:/Java/IntelliJ IDEA/python-demo/bin/basic_data_types/py_Tuple.py”, line 26, in <module><br>    tup[0] = 11<br>TypeError: ‘tuple’ object does not support item assignment</module></p><p>string, list 和tuple都属于sequence（序列）</p><p>注意：</p><ol><li>与字符串一样，元组的元素不能修改。</li><li>元组也可以被索引和切片，方法一样。</li><li>注意构造包含0或1个元素的元组的特殊语法规则。</li><li>元组也可以使用+操作符进行拼接</li></ol><hr><ol start="19"><li>Set（集合）</li></ol><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。<br>基本功能是进行成员关系测试和删除重复元素。<br>可以使用大括号{}或者set()函数创建集合，注意：创建一个空集合必须用set()而不是{}，因为<br>{}是用来创建一个空字典。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parame = &#123;1, 2, 3&#125;</span><br><span class="line">set(1, 2, 3)</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;&quot;Tom&quot;, &quot;Jim&quot;, &quot;Mary&quot;, &quot;Tom&quot;, &quot;Jack&quot;, &quot;Rose&quot;&#125;</span><br><span class="line"></span><br><span class="line">print(student)  # 输出集合，重复的元素被自动去掉</span><br><span class="line"></span><br><span class="line"># 成员测试</span><br><span class="line">if &apos;Rose&apos; in student:</span><br><span class="line">    print(&quot;Rose 在集合中&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;Rose 不在集合中&quot;)</span><br><span class="line"></span><br><span class="line"># set 可以进行集合运算</span><br><span class="line">a = set(&quot;abracadabra&quot;)</span><br><span class="line">b = set(&quot;alacazam&quot;)</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(&quot;------------------&quot;)</span><br><span class="line"></span><br><span class="line">print(a - b)  # a 和 b 的差集</span><br><span class="line">print(a | b)  # a 和 b 的并集</span><br><span class="line">print(a &amp; b)  # a 和 b 的交集</span><br><span class="line">print(a ^ b)  # a 和 b 中不同时存在的元素</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：<br>{‘Jack’, ‘Rose’, ‘Mary’, ‘Jim’, ‘Tom’}<br>Rose 在集合中<br>{‘d’, ‘b’, ‘c’, ‘a’, ‘r’}<br>{‘c’, ‘z’, ‘m’, ‘a’, ‘l’}<br>-—————–<br>{‘d’, ‘b’, ‘r’}<br>{‘d’, ‘b’, ‘c’, ‘z’, ‘l’, ‘a’, ‘m’, ‘r’}<br>{‘a’, ‘c’}<br>{‘z’, ‘l’, ‘d’, ‘m’, ‘b’, ‘r’}</p><hr><ol start="20"><li>Dictionary（字典）</li></ol><p>字典（dictionary)是Python中另一个非常有用的内置数据类型。<br>列表是有序的对象集合，字典是无需的对象的集合。两者之间 的区别在于：<br>字典当中的元素是通过键来存取的，而不是通过偏移存取。<br>字典是一种映射类型，字典用{}标识，它是一个无序的键(key)：值(value)的集合。<br>键(key)必须使用不可变类型。<br>在同一个字典中，键(key)必须是唯一的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;&#125;</span><br><span class="line">dict1[&apos;one&apos;] = &quot;1 - 菜鸟教程&quot;</span><br><span class="line">dict1[2] = &quot;2 - 菜鸟工具&quot;</span><br><span class="line"></span><br><span class="line">tinydict = &#123;&apos;name&apos;: &apos;runoob&apos;, &apos;code&apos;: 1, &apos;site&apos;: &apos;www.runoob.com&apos;&#125;</span><br><span class="line"></span><br><span class="line">print(dict1[&apos;one&apos;])  # 输出键为&apos;one&apos;的值</span><br><span class="line">print(dict1[2])      # 输出键为2的值</span><br><span class="line">print(tinydict)     # 输出完整的字典</span><br><span class="line">print(tinydict.keys())  # 输出所有键</span><br><span class="line">print(tinydict.values())    # 输出所有值</span><br><span class="line">print(&quot;----------------&quot;)</span><br><span class="line"></span><br><span class="line"># 构造函数dict()可以直接从键值对序列中构建字典如下：</span><br><span class="line"></span><br><span class="line">dict2 = dict([(&apos;Runoob&apos;, 1), (&apos;Google&apos;, 2), (&apos;Taobao&apos;, 3)])</span><br><span class="line">print(dict2)</span><br><span class="line">print(&quot;----------------&quot;)</span><br><span class="line"></span><br><span class="line">dict3 = &#123;x: x**2 for x in (2, 4, 6)&#125;</span><br><span class="line">print(dict3)</span><br><span class="line">print(&quot;----------------&quot;)</span><br><span class="line"></span><br><span class="line">dict4 = dict(Runoob=1, Google=2, Taobao=3)</span><br><span class="line">print(dict4)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">另外，字典类型也有一些内置的函数，例如clear(), keys(), values()等。</span><br><span class="line">注意：</span><br><span class="line">1. 字典是一种映射类型，它的元素是键值对。</span><br><span class="line">2. 字典的关键字必须为不可变类型，且不能重复。</span><br><span class="line">3. 创建空字典使用&#123;&#125;。</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：<br>1 - 菜鸟教程<br>2 - 菜鸟工具<br>{‘name’: ‘runoob’, ‘code’: 1, ‘site’: ‘<a href="http://www.runoob.com&#39;}" target="_blank" rel="noopener">www.runoob.com&#39;}</a><br>dict_keys([‘name’, ‘code’, ‘site’])<br>dict_values([‘runoob’, 1, ‘<a href="http://www.runoob.com&#39;]" target="_blank" rel="noopener">www.runoob.com&#39;]</a>)<br>-—————<br>{‘Runoob’: 1, ‘Google’: 2, ‘Taobao’: 3}<br>-—————<br>{2: 4, 4: 16, 6: 36}<br>-—————<br>{‘Runoob’: 1, ‘Google’: 2, ‘Taobao’: 3}</p><hr><ol start="21"><li>Python数据类型转换</li></ol><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">print(int(2.3))     # 将x 转换为一个整数</span><br><span class="line">print(float(3))     # 将x 转换为一个浮点数</span><br><span class="line">print(complex(3))   # 创建一个复数</span><br><span class="line">print(str(&#123;1, &apos;2&apos;, 44&#125;))    # 将对象x转换为字符串</span><br><span class="line">print(repr(&#123;1, &apos;2&apos;, 44&#125;))   # 将对象x转换为表达式字符串</span><br><span class="line"></span><br><span class="line">print(eval(&quot;print(&apos;runoob&apos;)&quot;))  # 用来计算在字符串中的有效Python表达式，并返回一个的对象。</span><br><span class="line"></span><br><span class="line">a = &#123;&apos;name&apos;: &apos;zhangsan&apos;, &apos;age&apos;: 18, &apos;gender&apos;: &apos;male&apos;&#125;</span><br><span class="line">print(eval(&quot;a&quot;))</span><br><span class="line"></span><br><span class="line">print(tuple([1, &quot;jwaf&quot;, &quot;aaa&quot;]))    # 将序列s转换为一个元组</span><br><span class="line">print(list(&quot;abc&quot;))      # 将序列s转换为一个列表</span><br><span class="line"></span><br><span class="line">tuple1 = (1, &apos;a&apos;, 3)</span><br><span class="line">tuple2 = set(tuple1)    # 转换为可变集合</span><br><span class="line"></span><br><span class="line">print(dict([(&apos;a&apos;, 1), (&apos;b&apos;, 2)]))   # 创建一个字典。d必须是一个序列(key, value)元组。</span><br><span class="line"></span><br><span class="line">print(frozenset([1, 2, 3, &apos;3&apos;]))    # 转换为不可变集合</span><br><span class="line"></span><br><span class="line">print(chr(90))  # 将一个整数转换为一个字符 Ascii</span><br><span class="line"></span><br><span class="line">print(ord(&apos;A&apos;))     # 将一个字符转换为它的整数值</span><br><span class="line"></span><br><span class="line">print(hex(1))       # 将一个整数转换为一个十六进制字符串</span><br><span class="line"></span><br><span class="line">print(oct(1))       # 将一个整数转换为一个八进制字符串</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：<br>2<br>3.0<br>(3+0j)<br>{1, 44, ‘2’}<br>{1, 44, ‘2’}<br>runoob<br>None<br>{‘name’: ‘zhangsan’, ‘age’: 18, ‘gender’: ‘male’}<br>(1, ‘jwaf’, ‘aaa’)<br>[‘a’, ‘b’, ‘c’]<br>{‘a’: 1, ‘b’: 2}<br>frozenset({1, 2, 3, ‘3’})<br>Z<br>65<br>0x1<br>0o1</p><hr><p>22.</p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;打印输出：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(&amp;quot;Hello World!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;标识符：&lt;br&gt;第一个字符必须是字母表中字母或下划线_。&lt;br&gt;标识符的其他部分由字母、数字或下划线组成。&lt;br&gt;标识符对大小写敏感。&lt;br&gt;
&lt;br&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://miracle-xing.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
